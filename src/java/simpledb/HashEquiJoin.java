package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1, child2;
    private ConcurrentHashMap<Field, ArrayList<Tuple>> table;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        TupleDesc td = child1.getTupleDesc();
        return td.getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        TupleDesc td = child2.getTupleDesc();
        return td.getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        table = new ConcurrentHashMap<Field, ArrayList<Tuple>>();
        while(child1.hasNext()) {
            Tuple t = child1.next();
            Field f = t.getField(p.getField1());
            if (!table.containsKey(f)) {
                ArrayList<Tuple> a = new ArrayList<Tuple>();
                a.add(t);
                table.put(f, a);
            }
            else {
                ArrayList<Tuple> a = table.get(f);
                a.add(t);
            }
        }
        child1.rewind();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        table.clear();
        while(child1.hasNext()) {
            Tuple t = child1.next();
            Field f = t.getField(p.getField1());
            if (!table.containsKey(f)) {
                ArrayList<Tuple> a = new ArrayList<Tuple>();
                a.add(t);
                table.put(f, a);
            }
            else {
                ArrayList<Tuple> a = table.get(f);
                a.add(t);
            }
        }
        child1.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    private Tuple currentTuple2;
    private Iterator<Tuple> listIt;
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (currentTuple2 == null) {
            if (!child2.hasNext())
                return null;
            else{
                currentTuple2 = child2.next();
                Field f = currentTuple2.getField(p.getField2());
                while (!table.containsKey(f)) {
                    if (!child2.hasNext())
                        return null;
                    currentTuple2 = child2.next();
                    f = currentTuple2.getField(p.getField2());
                }
                ArrayList<Tuple> a = table.get(f);
                listIt = a.iterator();
            }
        }
        if (listIt != null) {
            while (listIt.hasNext()) {
                Tuple t1 = listIt.next();   
                if (!p.filter(t1, currentTuple2))
                    continue;
                TupleDesc td1 = t1.getTupleDesc(), td2 = currentTuple2.getTupleDesc();
                TupleDesc td = TupleDesc.merge(td1, td2);
                Tuple t = new Tuple(td);
                for (int i = 0; i < td1.numFields(); i++)
                    t.setField(i, t1.getField(i));
                for (int i = 0; i < td2.numFields(); i++)
                    t.setField(td1.numFields() + i, currentTuple2.getField(i));
                return t;
            }
        }
        while (child2.hasNext()) {
            currentTuple2 = child2.next();
            Field f = currentTuple2.getField(p.getField2());
            if (!table.containsKey(f))
                continue;
            ArrayList<Tuple> a = table.get(f);
            listIt = a.iterator();
            while (listIt.hasNext()) {
                Tuple t1 = listIt.next();
                if (!p.filter(t1, currentTuple2))
                    continue;
                TupleDesc td1 = t1.getTupleDesc(), td2 = currentTuple2.getTupleDesc();
                TupleDesc td = TupleDesc.merge(td1, td2);
                Tuple t = new Tuple(td);
                for (int i = 0; i < td1.numFields(); i++)
                    t.setField(i, t1.getField(i));
                for (int i = 0; i < td2.numFields(); i++)
                    t.setField(td1.numFields() + i, currentTuple2.getField(i));
                return t;
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }
    
}
